"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLuaLibBundle = exports.loadImportedLualibFeatures = exports.loadInlineLualibFeatures = exports.resolveRecursiveLualibFeatures = exports.readLuaLibFeature = exports.getLuaLibModulesInfo = exports.luaLibModulesInfoFileName = exports.LuaLibFeature = void 0;
const path = require("path");
const lua = require("./LuaAST");
var LuaLibFeature;
(function (LuaLibFeature) {
    LuaLibFeature["ArrayConcat"] = "ArrayConcat";
    LuaLibFeature["ArrayEntries"] = "ArrayEntries";
    LuaLibFeature["ArrayEvery"] = "ArrayEvery";
    LuaLibFeature["ArrayFilter"] = "ArrayFilter";
    LuaLibFeature["ArrayForEach"] = "ArrayForEach";
    LuaLibFeature["ArrayFind"] = "ArrayFind";
    LuaLibFeature["ArrayFindIndex"] = "ArrayFindIndex";
    LuaLibFeature["ArrayFrom"] = "ArrayFrom";
    LuaLibFeature["ArrayIncludes"] = "ArrayIncludes";
    LuaLibFeature["ArrayIndexOf"] = "ArrayIndexOf";
    LuaLibFeature["ArrayIsArray"] = "ArrayIsArray";
    LuaLibFeature["ArrayJoin"] = "ArrayJoin";
    LuaLibFeature["ArrayMap"] = "ArrayMap";
    LuaLibFeature["ArrayPush"] = "ArrayPush";
    LuaLibFeature["ArrayReduce"] = "ArrayReduce";
    LuaLibFeature["ArrayReduceRight"] = "ArrayReduceRight";
    LuaLibFeature["ArrayReverse"] = "ArrayReverse";
    LuaLibFeature["ArrayShift"] = "ArrayShift";
    LuaLibFeature["ArrayUnshift"] = "ArrayUnshift";
    LuaLibFeature["ArraySort"] = "ArraySort";
    LuaLibFeature["ArraySlice"] = "ArraySlice";
    LuaLibFeature["ArraySome"] = "ArraySome";
    LuaLibFeature["ArraySplice"] = "ArraySplice";
    LuaLibFeature["ArrayToObject"] = "ArrayToObject";
    LuaLibFeature["ArrayFlat"] = "ArrayFlat";
    LuaLibFeature["ArrayFlatMap"] = "ArrayFlatMap";
    LuaLibFeature["ArraySetLength"] = "ArraySetLength";
    LuaLibFeature["Await"] = "Await";
    LuaLibFeature["Class"] = "Class";
    LuaLibFeature["ClassExtends"] = "ClassExtends";
    LuaLibFeature["CloneDescriptor"] = "CloneDescriptor";
    LuaLibFeature["Decorate"] = "Decorate";
    LuaLibFeature["DecorateParam"] = "DecorateParam";
    LuaLibFeature["Delete"] = "Delete";
    LuaLibFeature["DelegatedYield"] = "DelegatedYield";
    LuaLibFeature["Error"] = "Error";
    LuaLibFeature["FunctionBind"] = "FunctionBind";
    LuaLibFeature["Generator"] = "Generator";
    LuaLibFeature["InstanceOf"] = "InstanceOf";
    LuaLibFeature["InstanceOfObject"] = "InstanceOfObject";
    LuaLibFeature["Iterator"] = "Iterator";
    LuaLibFeature["Map"] = "Map";
    LuaLibFeature["MathAtan2"] = "MathAtan2";
    LuaLibFeature["MathSign"] = "MathSign";
    LuaLibFeature["New"] = "New";
    LuaLibFeature["Number"] = "Number";
    LuaLibFeature["NumberIsFinite"] = "NumberIsFinite";
    LuaLibFeature["NumberIsNaN"] = "NumberIsNaN";
    LuaLibFeature["NumberToString"] = "NumberToString";
    LuaLibFeature["ObjectAssign"] = "ObjectAssign";
    LuaLibFeature["ObjectDefineProperty"] = "ObjectDefineProperty";
    LuaLibFeature["ObjectEntries"] = "ObjectEntries";
    LuaLibFeature["ObjectFromEntries"] = "ObjectFromEntries";
    LuaLibFeature["ObjectGetOwnPropertyDescriptor"] = "ObjectGetOwnPropertyDescriptor";
    LuaLibFeature["ObjectGetOwnPropertyDescriptors"] = "ObjectGetOwnPropertyDescriptors";
    LuaLibFeature["ObjectKeys"] = "ObjectKeys";
    LuaLibFeature["ObjectRest"] = "ObjectRest";
    LuaLibFeature["ObjectValues"] = "ObjectValues";
    LuaLibFeature["ParseFloat"] = "ParseFloat";
    LuaLibFeature["ParseInt"] = "ParseInt";
    LuaLibFeature["Promise"] = "Promise";
    LuaLibFeature["PromiseAll"] = "PromiseAll";
    LuaLibFeature["PromiseAllSettled"] = "PromiseAllSettled";
    LuaLibFeature["PromiseAny"] = "PromiseAny";
    LuaLibFeature["PromiseRace"] = "PromiseRace";
    LuaLibFeature["Set"] = "Set";
    LuaLibFeature["SetDescriptor"] = "SetDescriptor";
    LuaLibFeature["SparseArrayNew"] = "SparseArrayNew";
    LuaLibFeature["SparseArrayPush"] = "SparseArrayPush";
    LuaLibFeature["SparseArraySpread"] = "SparseArraySpread";
    LuaLibFeature["WeakMap"] = "WeakMap";
    LuaLibFeature["WeakSet"] = "WeakSet";
    LuaLibFeature["SourceMapTraceBack"] = "SourceMapTraceBack";
    LuaLibFeature["Spread"] = "Spread";
    LuaLibFeature["StringAccess"] = "StringAccess";
    LuaLibFeature["StringCharAt"] = "StringCharAt";
    LuaLibFeature["StringCharCodeAt"] = "StringCharCodeAt";
    LuaLibFeature["StringConcat"] = "StringConcat";
    LuaLibFeature["StringEndsWith"] = "StringEndsWith";
    LuaLibFeature["StringIncludes"] = "StringIncludes";
    LuaLibFeature["StringPadEnd"] = "StringPadEnd";
    LuaLibFeature["StringPadStart"] = "StringPadStart";
    LuaLibFeature["StringReplace"] = "StringReplace";
    LuaLibFeature["StringReplaceAll"] = "StringReplaceAll";
    LuaLibFeature["StringSlice"] = "StringSlice";
    LuaLibFeature["StringSplit"] = "StringSplit";
    LuaLibFeature["StringStartsWith"] = "StringStartsWith";
    LuaLibFeature["StringSubstr"] = "StringSubstr";
    LuaLibFeature["StringSubstring"] = "StringSubstring";
    LuaLibFeature["StringTrim"] = "StringTrim";
    LuaLibFeature["StringTrimEnd"] = "StringTrimEnd";
    LuaLibFeature["StringTrimStart"] = "StringTrimStart";
    LuaLibFeature["Symbol"] = "Symbol";
    LuaLibFeature["SymbolRegistry"] = "SymbolRegistry";
    LuaLibFeature["TypeOf"] = "TypeOf";
    LuaLibFeature["Unpack"] = "Unpack";
})(LuaLibFeature = exports.LuaLibFeature || (exports.LuaLibFeature = {}));
exports.luaLibModulesInfoFileName = "lualib_module_info.json";
let luaLibModulesInfo;
function getLuaLibModulesInfo(emitHost) {
    if (luaLibModulesInfo === undefined) {
        const lualibPath = path.resolve(__dirname, `../dist/lualib/${exports.luaLibModulesInfoFileName}`);
        const result = emitHost.readFile(lualibPath);
        if (result !== undefined) {
            luaLibModulesInfo = JSON.parse(result);
        }
        else {
            throw new Error(`Could not load lualib dependencies from '${lualibPath}'`);
        }
    }
    return luaLibModulesInfo;
}
exports.getLuaLibModulesInfo = getLuaLibModulesInfo;
function readLuaLibFeature(feature, emitHost) {
    const featurePath = path.resolve(__dirname, `../dist/lualib/${feature}.lua`);
    const luaLibFeature = emitHost.readFile(featurePath);
    if (luaLibFeature === undefined) {
        throw new Error(`Could not load lualib feature from '${featurePath}'`);
    }
    return luaLibFeature;
}
exports.readLuaLibFeature = readLuaLibFeature;
function resolveRecursiveLualibFeatures(features, emitHost, luaLibModulesInfo = getLuaLibModulesInfo(emitHost)) {
    const loadedFeatures = new Set();
    const result = [];
    function load(feature) {
        var _a;
        if (loadedFeatures.has(feature))
            return;
        loadedFeatures.add(feature);
        const dependencies = (_a = luaLibModulesInfo[feature]) === null || _a === void 0 ? void 0 : _a.dependencies;
        if (dependencies) {
            dependencies.forEach(load);
        }
        result.push(feature);
    }
    for (const feature of features) {
        load(feature);
    }
    return result;
}
exports.resolveRecursiveLualibFeatures = resolveRecursiveLualibFeatures;
function loadInlineLualibFeatures(features, emitHost) {
    let result = "";
    for (const feature of resolveRecursiveLualibFeatures(features, emitHost)) {
        const luaLibFeature = readLuaLibFeature(feature, emitHost);
        result += luaLibFeature + "\n";
    }
    return result;
}
exports.loadInlineLualibFeatures = loadInlineLualibFeatures;
function loadImportedLualibFeatures(features, emitHost) {
    const luaLibModuleInfo = getLuaLibModulesInfo(emitHost);
    const imports = Array.from(features).flatMap(feature => luaLibModuleInfo[feature].exports);
    const requireCall = lua.createCallExpression(lua.createIdentifier("require"), [
        lua.createStringLiteral("lualib_bundle"),
    ]);
    if (imports.length === 0) {
        return [];
    }
    const luaLibId = lua.createIdentifier("____lualib");
    const importStatement = lua.createVariableDeclarationStatement(luaLibId, requireCall);
    const statements = [importStatement];
    // local <export> = ____luaLib.<export>
    for (const item of imports) {
        statements.push(lua.createVariableDeclarationStatement(lua.createIdentifier(item), lua.createTableIndexExpression(luaLibId, lua.createStringLiteral(item))));
    }
    return statements;
}
exports.loadImportedLualibFeatures = loadImportedLualibFeatures;
let luaLibBundleContent;
function getLuaLibBundle(emitHost) {
    if (luaLibBundleContent === undefined) {
        const lualibPath = path.resolve(__dirname, "../dist/lualib/lualib_bundle.lua");
        const result = emitHost.readFile(lualibPath);
        if (result !== undefined) {
            luaLibBundleContent = result;
        }
        else {
            throw new Error(`Could not load lualib bundle from '${lualibPath}'`);
        }
    }
    return luaLibBundleContent;
}
exports.getLuaLibBundle = getLuaLibBundle;
//# sourceMappingURL=LuaLib.js.map